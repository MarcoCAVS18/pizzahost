// components/auth/SocialLoginButtons.jsx

import React from 'react';
import { FaGoogle, FaFacebook, FaApple } from 'react-icons/fa';
import { 
  signInWithGoogle, 
  signInWithFacebook, 
  signInWithApple 
} from '../../services/authService';

const SocialLoginButton = ({ icon, text, onClick, bgColor, textColor, hoverColor }) => (
  <button 
    onClick={onClick}
    className={`w-full ${bgColor} ${textColor} px-6 py-3 rounded-md flex items-center justify-center space-x-2 ${hoverColor} transition duration-200`}
  >
    {icon}
    <span>{text}</span>
  </button>
);

const SocialLoginButtons = () => {
  const handleGoogleSignIn = async () => {
    try {
      await signInWithGoogle();
    } catch (error) {
      console.error('Google sign in error:', error);
    }
  };

  const handleFacebookSignIn = async () => {
    try {
      await signInWithFacebook();
    } catch (error) {
      console.error('Facebook sign in error:', error);
    }
  };

  const handleAppleSignIn = async () => {
    try {
      await signInWithApple();
    } catch (error) {
      console.error('Apple sign in error:', error);
    }
  };

  return (
    <div className="space-y-4">
      <SocialLoginButton
        icon={<FaGoogle className="text-red-600" />}
        text="Sign in with Google"
        onClick={handleGoogleSignIn}
        bgColor="bg-white"
        textColor="text-gray-600"
        hoverColor="hover:bg-gray-100"
      />
      <SocialLoginButton
        icon={<FaFacebook />}
        text="Sign in with Facebook"
        onClick={handleFacebookSignIn}
        bgColor="bg-blue-600"
        textColor="text-white"
        hoverColor="hover:bg-blue-700"
      />
      <SocialLoginButton
        icon={<FaApple />}
        text="Sign in with Apple"
        onClick={handleAppleSignIn}
        bgColor="bg-black"
        textColor="text-white"
        hoverColor="hover:bg-gray-800"
      />
    </div>
  );
};

export default SocialLoginButtons;


// components/cart/ToggleCart.jsx

import React from 'react';
import { FaShoppingCart } from 'react-icons/fa';

const ToggleCart = () => {
  const cartQuantity = 5;

  return (
    <div className="flex items-center justify-center w-8 h-8">
      <div className="relative">
        <FaShoppingCart className="text-xl" />
        {cartQuantity > 0 && (
          <div className="absolute -top-2 -right-2 bg-red text-white text-xs font-bold w-4 h-4 flex items-center justify-center rounded-full">
            {cartQuantity}
          </div>
        )}
      </div>
    </div>
  );
};

export default ToggleCart;


// src/components/common/Button.jsx

import clsx from "clsx";

const Button = ({ text, onClick, className, variant = "primary" }) => {
  const textColor = clsx({
    "text-white": variant === "primary",
    "text-black": variant === "secondary",
    "text-gray-500": variant === "disabled",
  });

  return (
    <button
      onClick={onClick}
      className={`bg-darkRed ${textColor} text-sm font-serif py-4 px-8 rounded-3xl hover:bg-red transition ${className}`}
    >
      {text}
    </button>
  );
};

export default Button;


// src/components/common/Card.jsx

import React from 'react';
import Button from './Button';

const Card = ({ image, title, subtitle, buttonText }) => (
  <div className="flex flex-col md:flex-row md:items-center gap-8">
    <div className="w-72 h-72 md:w-72 md:h-64 flex-shrink-0 mx-auto md:mx-0">
      <img 
        src={image} 
        alt={title} 
        className="w-full h-full object-cover rounded-2xl" 
      />
    </div>
    <div className="flex-grow text-center md:text-left flex flex-col justify-between gap-6 my-4">
      <h4 className="font-serif font-semibold italic text-2xl">{title}</h4>
      <p className="text-gray-500 font-oldstyle text-xl">{subtitle}</p>
      <Button 
        text={buttonText} 
        className="bg-transparent border border-gray-700 font-oldstyle font-semibold text-gray-400 px-10 py-4 rounded-full hover:bg-gray-100 transition-colors text-lg mx-auto md:mx-0"
        variant='disabled'
      />
    </div>
  </div>
);

export default Card;


// components/common/ErrorMessage.jsx

import React from 'react';

const ErrorMessage = ({ message }) => {
  if (!message) return null;

  return (
    <div className="mb-6 p-3 bg-red-50 border-l-4 border-darkRed text-darkRed font-oldstyle">
      {message}
    </div>
  );
};

export default ErrorMessage;


// components/common/Footer.jsx

import logoFooter from '../../assets/images/logos/logoFooter.png';
import { Link } from 'react-router-dom';

const Footer = () => {
  return (
    <footer className="bg-green text-beige font-oldstyle py-24 px-8">
      <div className="container mx-auto grid grid-cols-2 sm:grid-cols-4 gap-8">
        <div className="flex flex-col justify-between h-full space-y-6 col-span-2 sm:col-span-1">
          <div>
            <img src={logoFooter} alt="Pepperoni Pizzas & Dishes" className="h-10 sm:h-12" />
          </div>
          <div>
            <p className="font-oldstyle text-sm sm:text-base">© 2024 PizzaPro, Inc.<br/> All rights reserved.</p>
          </div>
        </div>

        <div>
          <h3 className="font-oldstyle text-lg sm:text-xl font-bold mb-2">Explore</h3>
          <ul className="space-y-1 sm:space-y-2">
            <li><Link to="/" className="hover:text-lightRed transition-colors duration-300">Home</Link></li>
            <li><Link to="/menu" className="hover:text-lightRed transition-colors duration-300">Menu</Link></li>
            <li><Link to="/user" className="hover:text-lightRed transition-colors duration-300">About</Link></li>
            <li><Link to="/contact" className="hover:text-lightRed transition-colors duration-300">Contact</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="font-oldstyle text-lg sm:text-xl font-bold mb-2">Connect</h3>
          <ul className="space-y-1 sm:space-y-2">
            <li><a href="https://facebook.com" target="_blank" rel="noopener noreferrer" className="hover:text-lightRed transition-colors duration-300">Facebook</a></li>
            <li><a href="https://instagram.com" target="_blank" rel="noopener noreferrer" className="hover:text-lightRed transition-colors duration-300">Instagram</a></li>
            <li><a href="https://twitter.com" target="_blank" rel="noopener noreferrer" className="hover:text-lightRed transition-colors duration-300">Twitter</a></li>
            <li><a href="https://youtube.com" target="_blank" rel="noopener noreferrer" className="hover:text-lightRed transition-colors duration-300">YouTube</a></li>
          </ul>
        </div>

        <div>
          <h3 className="font-oldstyle text-lg sm:text-xl font-bold mb-2">Company</h3>
          <ul className="space-y-1 sm:space-y-2">
            <li><Link to="/user" className="hover:text-lightRed transition-colors duration-300">About Us</Link></li>
            <li><Link to="/careers" className="hover:text-lightRed transition-colors duration-300">Careers</Link></li>
            <li><Link to="/press" className="hover:text-lightRed transition-colors duration-300">Press</Link></li>
            <li><Link to="/faqs" className="hover:text-lightRed transition-colors duration-300">FAQs</Link></li>
          </ul>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


// components/common/Logo.jsx

import React from 'react';

const Logo = () => {
  return (
    <div className="bg-lightBeige w-48 flex flex-col">
      <h1 className="font-logo font-bold text-darkRed text-2xl tracking-wide">
        Pepperoni
      </h1>
      <p className="font-oldstyle text-darkRed text-md -mt-1">
        Pizzas & Dishes
      </p>
    </div>
  );
};

export default Logo;


// components/common/NavBar.jsx

import React, { useState } from "react";
import { FaTimes, FaHeart } from "react-icons/fa";
import { FiMenu } from "react-icons/fi";
import ToggleCart from "../cart/ToggleCart";
import ToggleUser from "../user/ToggleUser";
import Logo from "./Logo";
import Separator from "./Separator";

const NavBar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  return (
    <nav className="bg-lightBeige p-4 lg:p-6 flex justify-between items-center fixed top-0 left-0 right-0 z-50 shadow-md">
      {/* Logo + Navegación */}
      <div className="flex items-center space-x-8">
        <a href="/">
          <Logo />
        </a>

        {/* Desktop Menu */}
        <div className="hidden lg:flex space-x-6 font-oldstyle text-base">
          <a
            href="/"
            className="hover:text-darkRed hover:underline transition duration-200"
          >
            Home
          </a>
          <a
            href="/menu"
            className="hover:text-darkRed hover:underline transition duration-200"
          >
            Menu
          </a>
          <a
            href="/about"
            className="hover:text-darkRed hover:underline transition duration-200"
          >
            About
          </a>
          <a
            href="/contact"
            className="hover:text-darkRed hover:underline transition duration-200"
          >
            Contact
          </a>
        </div>
      </div>

      {/* Iconos de Perfil, Wishlist y Carrito */}
      <div className="hidden lg:flex space-x-6 items-center">
        <a
          href="/wishlist"
          className="flex items-center justify-center w-8 h-8 hover:text-gray-600 transition duration-200"
        >
          <FaHeart className="text-xl" />
        </a>
        <a href="/cart" className="hover:text-gray-600 transition duration-200">
          <ToggleCart />
        </a>
        <a href="/user" className="hover:text-gray-600 transition duration-200">
          <ToggleUser />
        </a>
      </div>

      {/* Mobile Menu Button */}
      <div className="lg:hidden relative z-50 flex items-center space-x-4">
        <a
          href="/wishlist"
          className="flex items-center justify-center w-8 h-8 hover:text-gray-600"
        >
          <FaHeart className="text-xl" />
        </a>
        <a href="/cart" className="hover:text-gray-600">
          <ToggleCart />
        </a>
        <button onClick={toggleMenu}>
          {isMenuOpen ? (
            <FaTimes className="text-[28px]" />
          ) : (
            <FiMenu className="text-[28px]" />
          )}
        </button>
      </div>

      {/* Mobile Menu */}
      {isMenuOpen && (
        <div className="lg:hidden fixed inset-0 bg-black/50 z-40">
          <div className="fixed top-0 left-0 right-0 bg-lightBeige shadow-lg overflow-y-auto animate-slideDown transform transition-transform duration-300">
            <div className="p-8 flex flex-col space-y-6 font-oldstyle">
              <Logo />

              <a
                href="/"
                className="text-lg py-2 hover:text-darkRed hover:underline"
              >
                Home
              </a>
              <a
                href="/menu"
                className="text-lg py-2 hover:text-darkRed hover:underline"
              >
                Menu
              </a>
              <a
                href="/about"
                className="text-lg py-2 hover:text-darkRed hover:underline"
              >
                About
              </a>
              <a
                href="/contact"
                className="text-lg py-2 hover:text-darkRed hover:underline"
              >
                Contact
              </a>

              <Separator className="my-2" />

              <div className="flex items-center space-x-2">
                <a href="/user" className="flex items-center hover:text-gray-600">
                  <ToggleUser />
                  <span className="text-lg ml-2">Sign In / Sign Up</span>
                </a>
              </div>
            </div>
          </div>
        </div>
      )}
    </nav>
  );
};

export default NavBar;


// components/common/PrivateRoute.jsx


import { Navigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

const PrivateRoute = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div className='font-oldstyle italic text-2xl'>Loading...</div>; 
  }

  if (!user) {
    return <Navigate to="/user" />;
  }

  return children;
};

export default PrivateRoute;



// components/common/ProductCard.jsx

const ProductCard = ({ image, title, alt, className = '' }) => (
    <div className={`group relative rounded-3xl overflow-hidden aspect-square shadow-md hover:shadow-xl transition-all duration-300 ${className}`}>
      <img
        src={image}
        alt={alt}
        className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
      />
      <div className="absolute inset-0 bg-black/30 group-hover:bg-black/50 transition-colors duration-300" />
      <div className="absolute bottom-0 left-0 right-0 p-4 text-center bg-gradient-to-t from-black/50 to-transparent">
        <h3 className="text-white font-serif text-xl drop-shadow-lg">{title}</h3>
      </div>
    </div>
);

  export default ProductCard;


  // components/common/Separator.jsx

import React from 'react';

const Separator = ({ text, orientation = 'horizontal' }) => {
  const isVertical = orientation === 'vertical';
  
  if (isVertical) {
    return (
      <div className="relative mx-8 h-full">
        <div className="absolute top-0 bottom-0 w-[1px] bg-gray-300" />
        {text && (
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
            <span className="px-2 bg-lightBeige text-gray-500 rotate-90 block">
              {text}
            </span>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="relative my-8">
      <div className="absolute inset-0 flex items-center">
        <div className="w-full border-t border-gray-300" />
      </div>
      {text && (
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-lightBeige text-gray-500">
            {text}
          </span>
        </div>
      )}
    </div>
  );
};

export default Separator;



// components/common/Wait.jsx

import React from "react";
import { FaTools } from "react-icons/fa";

import { AnimationProvider } from "../../context/ScrollAnimation/AnimationContext";
import ScrollAnimation from "../../context/ScrollAnimation/ScrollAnimation";

const Wait = () => {
  return (
    <AnimationProvider>
      <div className="flex flex-col bg-lightBeige items-center justify-center min-h-screen">
        <ScrollAnimation delay={0}>
          <FaTools className="text-8xl text-gray-400 mb-8" />
        </ScrollAnimation>
        <ScrollAnimation delay={200}>
          <div className="text-center items-center">
            <h2 className="text-4xl font-logo italic font-bold text-gray-800 mb-4">
              Under Construction
            </h2>
            <p className="text-xl font-serif text-gray-600">
              You'll be able to enjoy this soon!
            </p>
          </div>
        </ScrollAnimation>
      </div>
    </AnimationProvider>
  );
};

export default Wait;


// components/constants/ProductData

import pizza3 from '../../assets/images/pizzas/pizza3.jpg'
import pizza4 from '../../assets/images/pizzas/pizza4.jpg'
import pizzaCustom from '../../assets/images/pizzas/CustomPizza.jpg'

import pastaRavioli from '../../assets/images/pasta/pasta3.jpg'


export const FEATURED_PRODUCTS = [
    {
      id: 'size-variety',
      image: pizza3,
      title: 'Many Sizes',
      alt: 'Various pizza sizes display'
    },
    {
      id: 'flavor-variety',
      image: pizza4,
      title: 'Many Flavors',
      alt: 'Different pizza flavors showcase'
    },
    {
      id: 'pasta-option',
      image: pastaRavioli,
      title: 'Or Pasta?',
      alt: 'Delicious pasta dish'
    },
    {
      id: 'custom-pizza',
      image: pizzaCustom,
      title: 'Customize Your Pie',
      alt: 'Customizable pizza options'
    },
  ];


  // components/dashboard/LogoutButton.jsx

import React from 'react';
import { useNavigate } from 'react-router-dom';
import { FaSignOutAlt } from 'react-icons/fa';
import { logOut } from '../../services/authService';

const LogoutButton = () => {
  const navigate = useNavigate();

  const handleLogout = async () => {
    try {
      await logOut();
      navigate('/');
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  return (
    <button
      onClick={handleLogout}
      className="flex items-center gap-2 px-4 py-2 text-darkRed hover:text-lightRed transition-colors font-oldstyle"
    >
      <FaSignOutAlt />
      <span>Sign Out</span>
    </button>
  );
};

export default LogoutButton;


// components/dashboard/ProfileHeader.jsx

import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { uploadProfileImage } from '../../context/AuthContext';
import { FaCamera, FaUser } from 'react-icons/fa';

const ProfileHeader = () => {
  const { user } = useAuth();
  const [isUploading, setIsUploading] = useState(false);

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    try {
      setIsUploading(true);
      await uploadProfileImage(file);
    } catch (error) {
      console.error('Error updating profile image:', error);
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="text-center mb-12">
      <div className="relative inline-block">
        <div className="w-40 h-40 rounded-full overflow-hidden border-4 border-darkRed mb-4 relative group bg-gray-100">
          {user?.photoURL ? (
            <img
              src={user.photoURL}
              alt="Profile"
              className="w-full h-full object-cover"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <FaUser className="text-6xl text-gray-400" />
            </div>
          )}
          
          {/* Overlay para cambiar foto */}
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer">
            <label className="cursor-pointer p-4">
              <input
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="hidden"
                disabled={isUploading}
              />
              <FaCamera className="text-white text-2xl" />
            </label>
          </div>
          
          {/* Indicador de carga */}
          {isUploading && (
            <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-white"></div>
            </div>
          )}
        </div>
      </div>

      <h1 className="font-serif italic text-3xl mb-2">
        {user?.displayName || 'User Name'}
      </h1>
      <p className="font-oldstyle text-gray-600">
        {user?.email}
      </p>
    </div>
  );
};

export default ProfileHeader;


// components/dashboard/RecentOrders.jsx

import React from 'react';

const RecentOrders = () => {
  const orders = [
    {
      id: '#12345',
      date: '2024-01-15',
      total: 45.99,
      status: 'Delivered'
    },
    {
      id: '#12346',
      date: '2024-01-10',
      total: 32.50,
      status: 'In Progress'
    },
  ];

  return (
    <div className=" rounded-lg shadow-md p-6">
      <h2 className="font-serif italic text-2xl mb-6">Recent Orders</h2>
      
      <div className="space-y-4">
        {orders.length > 0 ? (
          orders.map((order) => (
            <div 
              key={order.id}
              className="border-b border-gray-200 pb-4 last:border-0 last:pb-0"
            >
              <div className="flex justify-between items-center">
                <div>
                  <p className="font-oldstyle text-lg">{order.id}</p>
                  <p className="text-gray-600 text-sm">
                    {new Date(order.date).toLocaleDateString()}
                  </p>
                </div>
                <div className="text-right">
                  <p className="font-oldstyle">${order.total}</p>
                  <p className={`text-sm ${
                    order.status === 'Delivered' ? 'text-green-600' : 'text-blue-600'
                  }`}>
                    {order.status}
                  </p>
                </div>
              </div>
            </div>
          ))
        ) : (
          <p className="text-gray-500 text-center font-oldstyle">
            No orders yet
          </p>
        )}
      </div>
    </div>
  );
};

export default RecentOrders;


// components/dashboard/UserShippingInfo.jsx

import React from 'react';
import { FaEdit } from 'react-icons/fa';

const UserShippingInfo = () => {
  // Estos datos vendrán de tu base de datos
  const userInfo = {
    fullName: 'John Doe',
    address: '123 Pizza Street, NY 10001',
    phone: '+1 (555) 123-4567',
    userId: '4321' // ID de 4 dígitos
  };

  return (
    <div className="rounded-lg shadow-md p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="font-serif italic text-2xl">Shipping Information</h2>
        <button className="text-darkRed hover:text-lightRed transition-colors">
          <FaEdit className="text-xl" />
        </button>
      </div>

      <div className="space-y-4 font-oldstyle">
        <div>
          <label className="text-gray-600 text-sm">Full Name</label>
          <p className="text-lg">{userInfo.fullName}</p>
        </div>

        <div>
          <label className="text-gray-600 text-sm">Shipping Address</label>
          <p className="text-lg">{userInfo.address}</p>
        </div>

        <div>
          <label className="text-gray-600 text-sm">Phone Number</label>
          <p className="text-lg">{userInfo.phone}</p>
        </div>

        <div>
          <label className="text-gray-600 text-sm">User ID</label>
          <p className="text-lg">{userInfo.userId}</p>
        </div>
      </div>
    </div>
  );
};

export default UserShippingInfo;


// components/home/other experience/OtherExperience.jsx

import React from "react";
import SideCard from "./SideCard";
import friesImage from "../../../assets/images/pizzas/prueba2.webp";
import garlicKnotsImage from "../../../assets/images/pizzas/prueba2.webp";
import dippingSaucesImage from "../../../assets/images/pizzas/prueba2.webp";
import appImage from "../../../assets/images/pizzas/prueba2.webp";

import { AnimationProvider } from "../../../context/ScrollAnimation/AnimationContext";
import ScrollAnimation from "../../../context/ScrollAnimation/ScrollAnimation";

const OtherExperience = () => {
  const cards = [
    {
      image: friesImage,
      title: "Crispy Golden Fries",
      subtitle: "Perfectly Salted",
      description:
        "Indulge in our perfectly crisp and golden fries, made fresh to order and seasoned to perfection.",
    },
    {
      image: garlicKnotsImage,
      title: "Garlic Knots",
      subtitle: "Buttery Goodness",
      description:
        "Savor the irresistible combination of warm, fluffy dough and fragrant garlic in every bite of our delectable garlic knots.",
    },
    {
      image: dippingSaucesImage,
      title: "Dipping Sauces",
      subtitle: "Elevate Your Experience",
      description:
        "Discover a variety of delectable dipping sauces to complement your favorite sides.",
    },
    {
      image: appImage,
      title: "Download Our App",
      subtitle: "Convenient Ordering",
      description:
        "Discover the ultimate pizza and pasta experience with our app for convenient ordering.",
    },
  ];

  return (
    <AnimationProvider>
      <section className="bg-darkRed py-16 px-8">
        <div className="max-w-7xl mx-auto text-center">
          <ScrollAnimation delay={0}>
            <h2 className="text-beige font-oldstyle text-2xl">
              Explore Our Sides
            </h2>
          </ScrollAnimation>

          <ScrollAnimation delay={200}>
            <p className="text-white font-serif italic text-4xl mb-8">
              Pair it with Perfection
            </p>
          </ScrollAnimation>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {cards.map((card, index) => (
              <ScrollAnimation key={index} delay={400 + index * 200}>
                <SideCard
                  key={index}
                  image={card.image}
                  title={card.title}
                  subtitle={card.subtitle}
                  description={card.description}
                />
              </ScrollAnimation>
            ))}
          </div>
        </div>
      </section>
    </AnimationProvider>
  );
};

export default OtherExperience;


// components/home/other experience/SideCard.jsx

import React from "react";

const SideCard = ({ image, title, subtitle, description }) => {
  return (
    <div className="bg-lightRed shadow-lg p-6 text-center h-96 w-full sm:w-72 mx-auto flex flex-col justify-between rounded-lg">
      <img src={image} alt={title} className="w-28 h-28 mx-auto mb-6 object-cover rounded-full" />
      <h3 className="text-white font-oldstyle font-bold text-2xl mb-2">{title}</h3>
      <p className="text-beige font-oldstyle font-semibold text-lg">{subtitle}</p>
      <p className="text-beige font-oldstyle text-sm mt-4">{description}</p>
    </div>
  );
};

export default SideCard;


// components/home/FeaturedProducts.jsx

import React from 'react';
import { AnimationProvider } from '../../context/ScrollAnimation/AnimationContext';
import ScrollAnimation from '../../context/ScrollAnimation/ScrollAnimation';
import { FEATURED_PRODUCTS } from '../constants/ProductData';
import ProductCard from '../common/ProductCard';

const FeaturedProducts = () => {
  return (
    <AnimationProvider>
      <section className="bg-beige py-12 md:py-16">
        <div className="max-w-7xl mx-auto px-4">
          {/* Header Section */}
          <div className="text-center mb-8 md:mb-12">
            <ScrollAnimation delay={0}>
              <p className="text-gray-600 font-oldstyle mb-3">
                Indulge in our Specialty Pizzas
              </p>
            </ScrollAnimation>
            
            <ScrollAnimation delay={200}>
              <h2 className="font-serif italic text-3xl md:text-4xl lg:text-5xl">
                Flavors You'll Love
              </h2>
            </ScrollAnimation>
          </div>

          {/* Desktop Layout */}
          <div className="hidden lg:grid grid-cols-4 gap-6">
            {FEATURED_PRODUCTS.map((product, index) => (
              <ScrollAnimation key={product.id} delay={300 + (index * 100)}>
                <ProductCard 
                  {...product}
                  className="cursor-pointer"
                />
              </ScrollAnimation>
            ))}
          </div>

          {/* Tablet Layout */}
          <div className="hidden md:block lg:hidden">
            <div className="grid grid-cols-3 gap-4 mb-4">
              {FEATURED_PRODUCTS.slice(0, 3).map((product, index) => (
                <ScrollAnimation key={product.id} delay={300 + (index * 100)}>
                  <ProductCard 
                    {...product}
                    className="group"
                  />
                </ScrollAnimation>
              ))}
            </div>
            
            <ScrollAnimation delay={600}>
              <div className="relative rounded-3xl overflow-hidden aspect-[21/9] shadow-md">
                <img
                  src={FEATURED_PRODUCTS[3].image}
                  alt={FEATURED_PRODUCTS[3].alt}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-black/20" />
                <div className="absolute bottom-0 left-0 right-0 p-6 text-center">
                  <h3 className="text-white font-serif text-2xl">
                    {FEATURED_PRODUCTS[3].title}
                  </h3>
                </div>
              </div>
            </ScrollAnimation>
          </div>

          {/* Mobile Layout */}
          <div className="md:hidden grid grid-cols-2 gap-4">
            {FEATURED_PRODUCTS.map((product, index) => (
              <ScrollAnimation key={product.id} delay={300 + (index * 100)}>
                <ProductCard 
                  {...product}
                  className="rounded-2xl"
                />
              </ScrollAnimation>
            ))}
          </div>
        </div>
      </section>
    </AnimationProvider>
  );
};

export default FeaturedProducts;

// components/home/HeroSection.jsx

import React from "react";
import Button from '../common/Button';
import pizzaImage from '../../assets/images/HaUXj7y2oPuGZlctjXfr0i-4096x4096.webp';
import smallPizzaImage from '../../assets/images/CxBPjGDGcVKJLxDP3jr0Ks-4096x4096.webp';

import { AnimationProvider } from '../../context/ScrollAnimation/AnimationContext';
import ScrollAnimation from '../../context/ScrollAnimation/ScrollAnimation';

const HeroSection = () => {
  return (
    <AnimationProvider>
      <section className="relative bg-beige min-h-screen flex items-center justify-center px-6">
        <div className="w-full mx-auto flex flex-col md:flex-row items-center gap-8 z-10">
          <div className="flex-1 md:text-left">
            <ScrollAnimation delay={0}>
              <h1 className="text-7xl md:text-5xl font-bold italic leading-tight text-black font-serif mt-8 md:mt-0">
                Delicious <span className="text-primary italic">Wood-Fired</span>
              </h1>
            </ScrollAnimation>
            
            <ScrollAnimation delay={200}>
              <p className="text-gray-600 text-2xl mt-4 md:mt-2 font-oldstyle">
                Discover our mouthwatering selection of freshly made pizzas.
              </p>
            </ScrollAnimation>
            
            <ScrollAnimation delay={400}>
              <div className="mt-6 flex justify-start">
                <Button text="Order Now" className="sm:w-auto" />
              </div>
            </ScrollAnimation>
          </div>

          <div className="relative w-full md:w-[42%] mt-6 md:mt-0 flex justify-center sm:px-4">
            <ScrollAnimation delay={0}>
              <img
                src={pizzaImage}
                alt="Pizza in pan"
                className="w-full md:w-auto max-w-full"
              />
            </ScrollAnimation>

            <div className="absolute bottom-6 left-6 z-20">
              <ScrollAnimation delay={200}>
                <img
                  src={smallPizzaImage}
                  alt="Small Pizza"
                  className="w-[150px] md:w-[150px] sm:w-[100px] max-w-full"
                />
              </ScrollAnimation>
            </div>
          </div>
        </div>
      </section>
    </AnimationProvider>
  );
};

export default HeroSection;


// components/home/PastaSection.jsx

import React from "react";
import Card from "../common/Card";
import pastaImage from "../../assets/images/pasta/pasta1.webp";
import pastaImage2 from "../../assets/images/pasta/pasta2.webp";
import primaryImage from "../../assets/images/pasta/pastaMain.webp";

import { AnimationProvider } from "../../context/ScrollAnimation/AnimationContext";
import ScrollAnimation from "../../context/ScrollAnimation/ScrollAnimation";

const PastaSection = () => {
  const pastaOptions = [
    {
      image: pastaImage,
      title: "The Classic",
      subtitle: "Classic Italian Flavors",
      buttonText: "Add to Cart",
    },
    {
      image: pastaImage2,
      title: "The Pepperoni",
      subtitle: "A Classic Delight",
      buttonText: "Add to Cart",
    },
  ];

  return (
    <AnimationProvider>
      <section className="bg-beige py-16 sm:py-24 px-4 sm:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <ScrollAnimation delay={0}>
              <p className="text-gray-500 text-sm font-serif italic">
                Satisfy Your Cravings
              </p>
            </ScrollAnimation>
            <ScrollAnimation delay={200}>
              <h2 className="font-serif font-semibold italic text-4xl sm:text-5xl mt-4">
                Pasta Perfection
              </h2>
            </ScrollAnimation>
            <ScrollAnimation delay={400}>
              <h3 className="text-gray-600 text-md sm:text-lg font-oldstyle mt-6 max-w-3xl mx-auto">
                Discover our wide array of delectable pasta dishes, from classic
                spaghetti and meatballs to innovative vegetarian creations.
                <br className="hidden sm:block" />
                Each plate is a culinary masterpiece, crafted with the freshest
                ingredients and cooked to perfection
              </h3>
            </ScrollAnimation>
          </div>

          <div className="max-w-6xl mx-auto flex flex-col lg:flex-row gap-8 lg:gap-14">
            <div className="lg:w-1/2 flex flex-col gap-8">
              {pastaOptions.map((pasta, index) => (
                <ScrollAnimation key={index} delay={600 + index * 200}>
                  <Card
                    key={index}
                    image={pasta.image}
                    title={pasta.title}
                    subtitle={pasta.subtitle}
                    buttonText={pasta.buttonText}
                  />
                </ScrollAnimation>
              ))}
            </div>
            
            <div className="lg:w-1/2 relative">
              <ScrollAnimation delay={1000}>
                <div className="aspect-square w-full overflow-hidden rounded-3xl">
                  <img
                    src={primaryImage}
                    alt="Featured pasta dish"
                    className="w-full h-full object-cover"
                  />
                </div>
              </ScrollAnimation>
            </div>
          </div>
        </div>
      </section>
    </AnimationProvider>
  );
};

export default PastaSection;


// components/home/PizzaSection.jsx

import React from "react";
import Card from "../common/Card";
import pizzaImage from "../../assets/images/pizzas/prueba2.webp";
import primaryImage from "../../assets/images/EQgnndgsDnOFzMSzJxRuiI-4096x4096.webp";
import Button from "../common/Button";

import { AnimationProvider } from "../../context/ScrollAnimation/AnimationContext";
import ScrollAnimation from "../../context/ScrollAnimation/ScrollAnimation";

const PizzaSection = () => {
  const pizzaOptions = [
    {
      image: pizzaImage,
      title: "The Classic",
      subtitle: "Classic Italian Flavors",
      buttonText: "Add to Cart",
    },
    {
      image: pizzaImage,
      title: "The Pepperoni",
      subtitle: "A Classic Delight",
      buttonText: "Add to Cart",
    },
  ];

  return (
    <AnimationProvider>
      <div className="bg-beige py-8 sm:py-16 px-4 sm:px-8">
        <div className="text-center mb-12">
          <ScrollAnimation delay={0}>
            <p className="text-gray-500 text-sm font-serif italic">
              Explore Our Pizza Favorites
            </p>
          </ScrollAnimation>
          <ScrollAnimation delay={200}>
            <h2 className="font-serif font-semibold italic text-4xl sm:text-5xl my-4">
              Elevate Your Dining
              <br />
              Experience with Our
            </h2>
          </ScrollAnimation>
          <ScrollAnimation delay={400}>
            <Button
              text="View Menu"
              className="font-oldstyle font-semibold text-white bg-darkRed hover:bg-red py-2 px-6 rounded-full transition text-lg mx-auto md:mx-0"
            />
          </ScrollAnimation>
        </div>

        <div className="max-w-6xl mx-auto flex flex-col lg:flex-row gap-14 min-h-[545px]">
          <div className="lg:w-1/2 h-full order-1 lg:order-none">
            <ScrollAnimation delay={600}>
              <div className="w-full h-full">
                <img
                  src={primaryImage}
                  alt="Featured pizza"
                  className="w-full h-full object-cover rounded-3xl"
                />
              </div>
            </ScrollAnimation>
          </div>
          <div className="lg:w-1/2 flex flex-col gap-8 justify-start order-2 lg:order-none">
            {pizzaOptions.map((pizza, index) => (
              <ScrollAnimation key={index} delay={800 + index * 200}>
                <Card
                  key={index}
                  image={pizza.image}
                  title={pizza.title}
                  subtitle={pizza.subtitle}
                  buttonText={pizza.buttonText}
                />
              </ScrollAnimation>
            ))}
          </div>
        </div>
      </div>
    </AnimationProvider>
  );
};

export default PizzaSection;


// components/user/LogIn.jsx

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import SocialLoginButtons from '../auth/SocialLoginButtons';
import { logIn } from '../../services/authService';
import Separator from '../common/Separator';

const LogIn = () => {
  const navigate = useNavigate();
  const [loginError, setLoginError] = useState('');

  const loginSchema = yup.object().shape({
    email: yup.string().email('Invalid email').required('Email is required'),
    password: yup.string().required('Password is required'),
  });

  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(loginSchema),
  });

  const errorMessages = {
    'auth/wrong-password': 'Incorrect email or password.',
    'auth/user-not-found': 'No account exists with this email.',
    'auth/too-many-requests': 'Too many failed attempts. Please try again later.',
    'auth/invalid-credential': 'Invalid credentials. Please check your email and password.',
  };

  const onSubmit = async (data) => {
    try {
      setLoginError('');
      await logIn(data.email, data.password);
      console.log('User logged in successfully');
      navigate('/dashboard');
    } catch (error) {
      console.error('Error during log in:', error);
      setLoginError(
        errorMessages[error.code] || 'An error occurred during login. Please try again.'
      );
    }
  };

  return (
    <div className="w-full">
      <h2 className="text-3xl font-bold mb-4 text-center font-oldstyle italic text-gray-800">Welcome Back</h2>
      <p className="text-center mb-6 text-gray-600 font-serif">Log in to your account</p>
      
      {loginError && (
        <div className="text-darkRed text-sm text-center mb-4">
          {loginError}
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div>
          <input
            type="email"
            placeholder="Email"
            {...register('email')}
            className="w-full px-3 py-2 border-b border-gray-300 bg-transparent focus:outline-none focus:border-darkRed"
          />
          {errors.email && <span className="text-darkRed text-xs block mt-1">{errors.email.message}</span>}
        </div>

        <div>
          <input
            type="password"
            placeholder="Password"
            {...register('password')}
            className="w-full px-3 py-2 border-b border-gray-300 bg-transparent focus:outline-none focus:border-darkRed"
          />
          {errors.password && <span className="text-darkRed text-xs block mt-1">{errors.password.message}</span>}
        </div>

        <div className="flex justify-end mb-4">
          <a href="/forgot-password" className="text-sm text-darkRed font-serif hover:text-lightRed">
            Forgot Password?
          </a>
        </div>

        <div>
          <button
            type="submit"
            className="w-full bg-darkRed text-white font-serif py-3 rounded hover:bg-lightRed transition duration-300"
          >
            Log In
          </button>
        </div>
      </form>

      <Separator text="Or" />

      <div>
        <SocialLoginButtons />
      </div>
    </div>
  );
};

export default LogIn;


// components/user/SignUp.jsx

import React from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { signUp } from '../../services/authService';

const SignUp = () => {
  const signUpSchema = yup.object().shape({
    firstName: yup.string().required('First name is required'),
    lastName: yup.string().required('Last name is required'),
    email: yup.string().email('Invalid email').required('Email is required'),
    phone: yup.string().matches(/^\d{10}$/, 'Phone number must be 10 digits').required('Phone number is required'),
    password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),
    confirmPassword: yup
      .string()
      .oneOf([yup.ref('password'), null], 'Passwords must match')
      .required('Confirm Password is required'),
  });

  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(signUpSchema),
  });

  const onSubmit = async (data) => {
    try {
      await signUp(data.email, data.password);
      console.log('User signed up successfully');
    } catch (error) {
      console.error('Error during sign up:', error);
    }
  };

  return (
    <div className="w-full">
      <h2 className="text-3xl md:text-3xl font-bold italic font-oldstyle mb-4 text-center text-gray-800 break-words">Create an Account</h2>
      <p className="text-center mb-6 text-gray-600 font-serif">Join our community today!</p>
      
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-[22.5px]">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <input
              type="text"
              placeholder="First Name"
              {...register('firstName')}
              className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-darkRed bg-transparent"
            />
            {errors.firstName && <span className="text-red-500 text-xs block mt-1">{errors.firstName.message}</span>}
          </div>
          
          <div>
            <input
              type="text"
              placeholder="Last Name"
              {...register('lastName')}
              className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-darkRed bg-transparent"
            />
            {errors.lastName && <span className="text-red-500 text-xs block mt-1">{errors.lastName.message}</span>}
          </div>
        </div>

        <div>
          <input
            type="email"
            placeholder="Email"
            {...register('email')}
            className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-darkRed bg-transparent"
          />
          {errors.email && <span className="text-red-500 text-xs block mt-1">{errors.email.message}</span>}
        </div>

        <div>
          <input
            type="tel"
            placeholder="Phone Number"
            {...register('phone')}
            className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-darkRed bg-transparent"
          />
          {errors.phone && <span className="text-red-500 text-xs block mt-1">{errors.phone.message}</span>}
        </div>

        <div>
          <input
            type="password"
            placeholder="Password"
            {...register('password')}
            className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-darkRed bg-transparent"
          />
          {errors.password && <span className="text-red-500 text-xs block mt-1">{errors.password.message}</span>}
        </div>

        <div>
          <input
            type="password"
            placeholder="Confirm Password"
            {...register('confirmPassword')}
            className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-darkRed bg-transparent"
          />
          {errors.confirmPassword && <span className="text-red-500 text-xs block mt-1">{errors.confirmPassword.message}</span>}
        </div>

        <div className="pt-2">
          <button
            type="submit"
            className="w-full bg-darkRed text-white py-3 rounded hover:bg-lightRed transition duration-300"
          >
            Sign Up
          </button>
        </div>
      </form>
    </div>
  );
};

export default SignUp;

// components/user/ToggleUser.jsx

import React from 'react';
import { FaUser } from 'react-icons/fa';
import { useAuth } from '../../context/AuthContext';

const ToggleUser = () => {
  const { user } = useAuth();

  return (
    <div className="w-8 h-8 flex items-center justify-center">
      {user?.photoURL ? (
        <img 
          src={user.photoURL} 
          alt="Profile" 
          className="w-full h-full rounded-full object-cover"
        />
      ) : (
        <FaUser className="text-xl" />
      )}
    </div>
  );
};

export default ToggleUser;


// components/context/ScrollAnimation/AnimationContext.jsx

import React, { createContext, useState, useContext } from 'react';

const AnimationContext = createContext();

export const useAnimation = () => useContext(AnimationContext);

export const AnimationProvider = ({ children }) => {
  const [animated, setAnimated] = useState({});

  const setElementAnimated = (elementId) => {
    setAnimated(prev => ({ ...prev, [elementId]: true }));
  };

  return (
    <AnimationContext.Provider value={{ animated, setElementAnimated }}>
      {children}
    </AnimationContext.Provider>
  );
};


// components/context/ScrollAnimation/ScrollAnimation.jsx

import React from 'react';
import { useInView } from 'react-intersection-observer';
import { useAnimation } from './AnimationContext';

const ScrollAnimation = ({ 
  children, 
  animationClass, 
  threshold = 0.1, 
  triggerOnce = true,
  delay = 0 
}) => {
  const { animated, setElementAnimated } = useAnimation();
  const { ref, inView } = useInView({
    threshold,
    triggerOnce,
  });

  const elementId = React.useId();

  React.useEffect(() => {
    if (inView && !animated[elementId]) {
      setElementAnimated(elementId);
    }
  }, [inView, elementId, animated, setElementAnimated]);

  return (
    <div
      ref={ref}
      className={`transition-all duration-1000 ease-out opacity-0 translate-y-8
        ${animated[elementId] ? `${animationClass} opacity-100 translate-y-0` : ''}`}
      style={{ 
        transitionDelay: `${delay}ms`,
      }}
    >
      {children}
    </div>
  );
};

export default ScrollAnimation;


// components/context/AuthContext.js

import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { updateProfile } from 'firebase/auth';
import React, { createContext, useContext, useState, useEffect } from 'react';
import { onAuthStateChanged, auth } from '../services/authService';

export const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged((user) => {
      setUser(user);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

const storage = getStorage();

export const uploadProfileImage = async (file) => {
  try {
    const storageRef = ref(storage, `profile-images/${auth.currentUser.uid}`);
    const snapshot = await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(snapshot.ref);
    
    await updateProfile(auth.currentUser, {
      photoURL: downloadURL
    });
    
    return downloadURL;
  } catch (error) {
    throw new Error('Error uploading profile image');
  }
};


// components/layouts/MainLayout.jsx

import React from 'react';

const MainLayout = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col">
      <main className="mt-[72px] lg:mt-[88px] flex-grow">
        {children}
      </main>
    </div>
  );
};

export default MainLayout;


// components/pages/Cart.jsx

import Wait from "../components/common/Wait";

import React from "react";

const Cart = () => {
  return <Wait />;
};

export default Cart;


// components/pages/Checkout.jsx

import React from 'react';
import Wait from '../components/common/Wait';

const Checkout = () => {
  return <Wait />;
};

export default Checkout;


// components/pages/ForgotPassword.jsx

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { resetPassword } from '../services/authService';
import { Link } from 'react-router-dom';

const ForgotPassword = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  const schema = yup.object().shape({
    email: yup
      .string()
      .email('Please enter a valid email')
      .required('Email is required'),
  });

  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema),
  });

  const onSubmit = async (data) => {
    try {
      setIsLoading(true);
      setError('');
      await resetPassword(data.email);
      setSuccess(true);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-lightBeige min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-lg md:max-w-2xl">
        <h2 className="text-4xl font-bold mb-8 font-oldstyle italic text-center">
          Reset Password
        </h2>

        {!success ? (
          <>
            <p className="text-center text-gray-600 mb-8 font-oldstyle">
              Enter your email address and we'll send you a link to reset your password.
            </p>

            {error && (
              <div className="mb-4 p-4 bg-red-50 border-l-4 border-red-500 text-red-700">
                {error}
              </div>
            )}

            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <input
                  type="email"
                  placeholder="Email"
                  {...register('email')}
                  className="w-full px-4 md:px-6 py-3 bg-transparent border-b-2 border-gray-300 focus:border-darkRed focus:outline-none transition-colors"
                  disabled={isLoading}
                />
                {errors.email && (
                  <span className="text-red-500 text-sm block mt-1">
                    {errors.email.message}
                  </span>
                )}
              </div>

              <div className="pt-4">
                <button
                  type="submit"
                  className="w-full bg-darkRed text-white px-6 py-3 rounded-md hover:bg-lightRed transition duration-200 font-oldstyle text-lg disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={isLoading}
                >
                  {isLoading ? 'Sending...' : 'Send Reset Link'}
                </button>
              </div>
            </form>
          </>
        ) : (
          <div className="text-center font-serif">
            <div className="mb-6 p-4">
              Password reset link has been sent to your email address.
              Please check your inbox and follow the instructions.
            </div>
            <p className="text-gray-600 mt-4">
              Didn't receive the email? Check your spam folder or try again.
            </p>
            <button
              onClick={() => setSuccess(false)}
              className="text-darkRed hover:text-lightRed underline mt-4 font-oldstyle"
            >
              Try Again
            </button>
          </div>
        )}

        <div className="mt-8 text-center">
          <Link
            to="/user"
            className="text-darkRed hover:text-lightRed underline font-oldstyle"
          >
            Back to Login
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;


// components/pages/Home.jsx

import React from 'react';
import HeroSection from '../components/home/HeroSection'; 
import FeaturedProducts from '../components/home/FeaturedProducts'; 
import PizzasSection from '../components/home/PizzasSection';
import PastaSection from '../components/home/PastaSection';
import OtherExperience from '../components/home/other experience/OtherExperience';

const Home = () => {
  return (
    <div>
      <HeroSection /> 
      <FeaturedProducts />
      <PizzasSection /> 
      <PastaSection /> 
      <OtherExperience />
      
    </div>
  );
};

export default Home;



// components/pages/Menu.jsx

import React from 'react';
import Wait from '../components/common/Wait';

const Menu = () => {
  return <Wait />;
};

export default Menu;


// components/pages/Menu.jsx

import React from 'react';

const NotFound = () => {
  return (
    <div>
      <h1>404 - Page Not Found</h1>
    </div>
  );
};

export default NotFound;


// components/pages/ResetPassword.jsx

import React, { useState, useEffect } from "react";
import { useSearchParams, useNavigate } from "react-router-dom";
import { confirmPasswordReset, verifyPasswordResetCode } from "firebase/auth";
import { auth } from "../services/authService";
import ErrorMessage from "../components/common/ErrorMessage";

const ResetPassword = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [isValid, setIsValid] = useState(false);

  const oobCode = searchParams.get("oobCode");

  useEffect(() => {
    const verifyCode = async () => {
      if (!oobCode) {
        setError("Invalid password reset link");
        return;
      }

      try {
        await verifyPasswordResetCode(auth, oobCode);
        setIsValid(true);
      } catch (error) {
        setError("This password reset link has expired or is invalid");
      }
    };

    verifyCode();
  }, [oobCode]);

  useEffect(() => {
    if (newPassword && confirmPassword) {
      if (newPassword === confirmPassword) {
        setError("");
      } else {
        setError("Passwords do not match");
      }
    }
  }, [newPassword, confirmPassword]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await confirmPasswordReset(auth, oobCode, newPassword);
      navigate("/user", {
        state: {
          message: "Password successfully reset. Please log in with your new password.",
        },
      });
    } catch (error) {
      setError("Error resetting password. Please try again.");
    }
  };

  if (!isValid) {
    return (
      <div className="min-h-screen bg-lightBeige flex items-center justify-center">
        <ErrorMessage message="Verifying reset link..." />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-lightBeige flex items-center justify-center">
      <div className="w-full max-w-lg md:max-w-lg lg:max-w-xl p-8">
        <h2 className="text-3xl font-oldstyle italic text-center mb-6">
          Reset Password
        </h2>

        <ErrorMessage message={error} />

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <input
              type="password"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              placeholder="New Password"
              className="w-full px-4 py-3 border-b-2 bg-transparent border-gray-300 focus:border-darkRed focus:outline-none"
              required
            />
          </div>

          <div>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Confirm New Password"
              className="w-full px-4 py-3 border-b-2 bg-transparent border-gray-300 focus:border-darkRed focus:outline-none"
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-darkRed text-white px-6 py-3 rounded-md font-oldstyle hover:bg-lightRed transition duration-200"
          >
            Reset Password
          </button>
        </form>
      </div>
    </div>
  );
};

export default ResetPassword;


// components/pages/UserDashboard.jsx

import React from 'react';
import ProfileHeader from '../components/dashboard/ProfileHeader';
import LogoutButton from '../components/dashboard/LogoutButton';
import UserShippingInfo from '../components/dashboard/UserShippingInfo';
import RecentOrders from '../components/dashboard/RecentOrders';

const UserDashboard = () => {
  return (
    <div className="min-h-screen bg-beige py-12">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-end mb-4">
          <LogoutButton />
        </div>
        <ProfileHeader />
        
        <div className="mt-12 grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12">
          <UserShippingInfo />
          <RecentOrders />
        </div>
      </div>
    </div>
  );
};

export default UserDashboard;


// components/pages/UserLog.jsx

import React from 'react';
import LogIn from '../components/user/LogIn';
import SignUp from '../components/user/SignUp';
import Separator from '../components/common/Separator';
import { AnimationProvider } from '../context/ScrollAnimation/AnimationContext';
import ScrollAnimation from '../context/ScrollAnimation/ScrollAnimation';

const UserLog = () => {
  return (
    <AnimationProvider>
      <div className="bg-beige min-h-screen flex items-start justify-center">
        <div className="container mx-auto max-w-6xl">
          <div className="grid md:grid-cols-[1fr_auto_1fr] gap-8 lg:gap-12">
            <ScrollAnimation delay={0} className="w-full">
              <div className="p-8 md:p-10 lg:p-12">
                <LogIn />
              </div>
            </ScrollAnimation>
            
            <div className="hidden md:block self-stretch flex items-center">
              <Separator orientation="vertical" />
            </div>
            
            <ScrollAnimation delay={300} className="w-full">
              <div className="p-8 md:p-10 lg:p-12">
                <SignUp />
              </div>
            </ScrollAnimation>
          </div>
        </div>
      </div>
    </AnimationProvider>
  );
};

export default UserLog;


// components/pages/Wishlist.jsx

import Wait from "../components/common/Wait";
import React from "react";

const Wishlist = () => {
  return (
    <div>
      <Wait /> 
    </div>
      );
};

export default Wishlist;


// src/services/authService.js

import { initializeApp } from 'firebase/app';
import { 
  getAuth, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut,
  signInWithPopup,
  signInWithRedirect,
  getRedirectResult,
  GoogleAuthProvider,
  FacebookAuthProvider,
  OAuthProvider,
  sendPasswordResetEmail
} from 'firebase/auth';

import { getStorage } from 'firebase/storage';


const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
export const storage = getStorage(app);


// Providers
const googleProvider = new GoogleAuthProvider();
const facebookProvider = new FacebookAuthProvider();
const appleProvider = new OAuthProvider('apple.com');

// Email & Password Authentication
export const signUp = async (email, password) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    return userCredential.user;
  } catch (error) {
    throw new Error(error.message);
  }
};

export const logIn = async (email, password) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return userCredential.user;
  } catch (error) {
    throw error;
  }
};

// Social Authentication with Popup fallback to Redirect
export const signInWithGoogle = async () => {
  try {
    const result = await signInWithPopup(auth, googleProvider);
    return result.user;
  } catch (error) {
    if (error.code === 'auth/popup-closed-by-user' || 
        error.code === 'auth/cancelled-popup-request' ||
        error.code === 'auth/popup-blocked') {
      await signInWithRedirect(auth, googleProvider);
      return null;
    }
    throw new Error(error.message);
  }
};

export const signInWithFacebook = async () => {
  try {
    const result = await signInWithPopup(auth, facebookProvider);
    return result.user;
  } catch (error) {
    if (error.code === 'auth/popup-closed-by-user' || 
        error.code === 'auth/cancelled-popup-request' ||
        error.code === 'auth/popup-blocked') {
      await signInWithRedirect(auth, facebookProvider);
      return null;
    }
    throw new Error(error.message);
  }
};

export const signInWithApple = async () => {
  try {
    const result = await signInWithPopup(auth, appleProvider);
    return result.user;
  } catch (error) {
    if (error.code === 'auth/popup-closed-by-user' || 
        error.code === 'auth/cancelled-popup-request' ||
        error.code === 'auth/popup-blocked') {
      await signInWithRedirect(auth, appleProvider);
      return null;
    }
    throw new Error(error.message);
  }
};

// Handle Redirect Results
export const handleRedirectResult = async () => {
  try {
    const result = await getRedirectResult(auth);
    if (result) {
      return result.user;
    }
    return null;
  } catch (error) {
    throw new Error(error.message);
  }
};

// Password Reset
export const resetPassword = async (email) => {
  try {
    await sendPasswordResetEmail(auth, email, {
      url: `http://localhost:3000/reset-password`,
      handleCodeInApp: true
    });
  } catch (error) {
    let errorMessage;
    
    switch (error.code) {
      case 'auth/user-not-found':
        errorMessage = 'No account found with this email address.';
        break;
      case 'auth/invalid-email':
        errorMessage = 'Please enter a valid email address.';
        break;
      case 'auth/unauthorized-continue-uri':
        errorMessage = 'Configuration error. Please contact support.';
        break;
      default:
        errorMessage = error.message;
    }
    
    throw new Error(errorMessage);
  }
};

// Logout
export const logOut = async () => {
  try {
    await signOut(auth);
  } catch (error) {
    throw new Error(error.message);
  }
};

// Auth state observer
export const onAuthStateChanged = (callback) => {
  return auth.onAuthStateChanged(callback);
};

export { auth };


// src/services/storageService.js
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { updateProfile } from 'firebase/auth';
import { auth } from './authService';

const storage = getStorage();

export const uploadProfileImage = async (file) => {
  try {
    const storageRef = ref(storage, `profile-images/${auth.currentUser.uid}`);
    const snapshot = await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(snapshot.ref);
    
    // Actualizar el perfil del usuario con la nueva foto
    await updateProfile(auth.currentUser, {
      photoURL: downloadURL
    });
    
    return downloadURL;
  } catch (error) {
    throw new Error('Error uploading profile image');
  }
};